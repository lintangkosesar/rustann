use plotters::prelude::*;
use std::path::Path;

pub fn plot_training_progress(
    epochs: &[usize],
    losses: &[f64],
    accuracies: &[f64],
    output_path: &str,
) -> Result<(), Box<dyn std::error::Error>> {
    let root = BitMapBackend::new(output_path, (800, 600)).into_drawing_area();
    root.fill(&WHITE)?;

    let max_epoch = *epochs.last().unwrap_or(&1) as f64;
    let max_loss = *losses.iter().max_by(|a, b| a.partial_cmp(b).unwrap()).unwrap_or(&1.0);
    let min_loss = *losses.iter().min_by(|a, b| a.partial_cmp(b).unwrap()).unwrap_or(&0.0);

    let mut chart = ChartBuilder::on(&root)
        .caption("Training Progress", ("sans-serif", 30).into_font())
        .margin(10)
        .x_label_area_size(40)
        .y_label_area_size(40)
        .right_y_label_area_size(40)
        .build_cartesian_2d(0f64..max_epoch, min_loss..max_loss)?
        .set_secondary_coord(0f64..max_epoch, 0f64..1.0);

    chart
        .configure_mesh()
        .x_desc("Epoch")
        .y_desc("Loss")
        .draw()?;

    chart
        .configure_secondary_axes()
        .y_desc("Accuracy")
        .draw()?;

    // Draw loss line
    chart.draw_series(LineSeries::new(
        epochs.iter().zip(losses.iter()).map(|(x, y)| (*x as f64, *y)),
        &RED,
    ))?;

    // Draw accuracy line (on secondary axis)
    chart.draw_secondary_series(LineSeries::new(
        epochs.iter().zip(accuracies.iter()).map(|(x, y)| (*x as f64, *y)),
        &BLUE,
    ))?;

    // Add legend
    chart
        .configure_series_labels()
        .background_style(&WHITE.mix(0.8))
        .border_style(&BLACK)
        .draw()?;

    root.present()?;
    Ok(())
}